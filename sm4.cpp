#include <iostream>
#include <smmintrin.h>
#include <tmmintrin.h>
#include <cstdint>
#include <cstring>

alignas(16) static const uint8_t SBOX[256] = {
    0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05,
    0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99,
    0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62,
    0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6,
    0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8,
    0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35,
    0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87,
    0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e,
    0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1,
    0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3,
    0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f,
    0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51,
    0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8,
    0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0,
    0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84,
    0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48
};

static const uint32_t FK[4] = { 0xa3b1bac6, 0x56aa3350, 0x677d9197, 0xb27022dc };
static const uint32_t CK[32] = {
    0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269,
    0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,
    0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,
    0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,
    0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229,
    0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,
    0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,
    0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279
};
//
uint32_t Sbox(uint32_t x) {
    return ((SBOX[x >> 24] & 0xff) << 24 | (SBOX[x >> 16] & 0xff) << 16 | (SBOX[x >> 8] & 0xff) << 8 | (SBOX[x] & 0xff));
}

//加密过程的L变换
uint32_t L(uint32_t x) {
    return x ^ (x << 2 | x >> (32 - 2)) ^ (x << 10 | x >> (32 - 10)) ^ (x << 18 | x >> (32 - 18)) ^ (x << 24 | x >> (32 - 24));
}

//密钥生成方案的L变换
uint32_t LK(uint32_t x) {
    return x ^ (x << 13 | x >> (32 - 13)) ^ (x << 23 | x >> (32 - 23));
}


void sm4_key_schedule(const uint32_t MK[4], uint32_t rk[32]) {
    uint32_t K[4];
    for (int i = 0; i < 4; ++i) K[i] = MK[i] ^ FK[i];
    for (int i = 0; i < 32; ++i) {
        uint32_t tmp = K[1] ^ K[2] ^ K[3] ^ CK[i];
        tmp = Sbox(tmp);
        tmp = LK(tmp);
        rk[i] = K[0] ^ tmp;
        K[0] = K[1]; K[1] = K[2]; K[2] = K[3]; K[3] = rk[i];
    }
}

//生成预计算T-table
void generate_SM4_Ttable(uint32_t T0[256], uint32_t T1[256], uint32_t T2[256], uint32_t T3[256]) {
    for (int i = 0; i < 256; i++) {
        uint32_t s = SBOX[i];
        uint32_t val = L((s << 24) | (s << 16) | (s << 8) | s); 
        T0[i] = val;
        T1[i] = (val << 8 | val >> 24);
        T2[i] = (val << 16 | val >> 16);
        T3[i] = (val << 24 | val >> 8);
    }
}

//使用T-table优化轮函数，避免线性运算周期
__m128i SM4_round(__m128i x0,__m128i x1, __m128i x2, __m128i x3, uint32_t rk,const uint32_t T0[256], const uint32_t T1[256],const uint32_t T2[256], const uint32_t T3[256]) {
    __m128i tmp = _mm_xor_si128(_mm_xor_si128(x1, x2), _mm_xor_si128(x3, _mm_set1_epi32(rk)));
    alignas(16) uint32_t arr[4];
    _mm_store_si128((__m128i*)arr,tmp );
    uint32_t t = T0[(arr[0] >> 24) & 0xFF] ^ T1[(arr[1] >> 16) & 0xFF] ^
        T2[(arr[2] >> 8) & 0xFF] ^ T3[arr[3] & 0xFF];
    return _mm_xor_si128(x0, _mm_set1_epi32(t));



void SM4_ENC_SIMD_4(const uint32_t IN[4][4],uint32_t OUT[4][4], const uint32_t rk[32], const uint32_t T0[256], const uint32_t T1[256], const uint32_t T2[256], const uint32_t T3[256]) {
    __m128i x0 = _mm_set_epi32(IN[3][0], IN[2][0], IN[1][0], IN[0][0]);
    __m128i x1 = _mm_set_epi32(IN[3][1], IN[2][1], IN[1][1], IN[0][1]);
    __m128i x2 = _mm_set_epi32(IN[3][2], IN[2][2], IN[1][2], IN[0][2]);
    __m128i x3 = _mm_set_epi32(IN[3][3], IN[2][3], IN[1][3], IN[0][3]);

    for (int round = 0; round < 32; round++) {
        __m128i tmp = SM4_round(x0, x1, x2, x3, rk[round], T0, T1, T2, T3);
        x0 = x1; x1 = x2; x2 = x3; x3 = tmp;
    }

    x3 = _mm_set_epi32(
        _mm_extract_epi32(x3, 0),
        _mm_extract_epi32(x2, 0),
        _mm_extract_epi32(x1, 0),
        _mm_extract_epi32(x0, 0)
    );

    alignas(16) uint32_t result[4];
    _mm_store_si128((__m128i*)result, x3);
    for (int i = 0; i < 4; i++) memcpy(OUT[i], &result[i], 4);
}
